# -*- coding: utf-8 -*-
"""diabetes-prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RDLFCBRJQl_FFg8XlXI_BMqBEOvNvzBn

importing dependies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""DATA COLLECTION AND ANALYSIS"""

df=pd.read_csv('/content/diabetes.csv')
df.head(5)

df['Outcome'].value_counts()

df.groupby('Outcome').mean()

#separating data into X nd Y
X=df.drop(columns='Outcome',axis=1)
Y=df['Outcome']

print(X)

"""STANDADIZATION PREPROCESSING-->we do standardiz to make all columns to be in a standard range as all columns are in different ranges so it makes model to predict less efficiently--stand--model prediction more efficient"""

scaler=StandardScaler() #creating instance of standardscalar class

scaler.fit(X)

standardized_data=scaler.transform(X)

print(standardized_data) #everything came in range of 0 and 1

X=standardized_data
Y=df['Outcome']

x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)
#stratify--equal proportion distribution of dataset to test and training data..
#random state--for reproducability and control randomness in data--if any other person copy my code then exactly same output will be give

"""TRAINING THE MODEL WITH SVM ALGORITHM ---SVM MODEL--SVC-SUPPORT VECTOR CLASSIFIER--->LINEAR KERNEL"""

classifier=svm.SVC(kernel='linear')   # loads svm model to classifier

# fit model by using classifier to training data
classifier.fit(x_train,y_train)

"""ACCURACY SCORE ON TRAINING DATA BY using accuracy_score class by comparing x_precdicted_on_x_train and y_train"""

train_x_predicted=classifier.predict(x_train)
accuracy_train=accuracy_score(train_x_predicted,y_train)

print(accuracy_train)

"""ACCURACY SCORE ON TESTING DATA"""

test_x_predicted=classifier.predict(x_test)
accuracy_test=accuracy_score(test_x_predicted,y_test)

print(accuracy_test)

"""MAKE A PREDICTIVE SYSTEM --ALWAYS SAME FOR ALL SYSTEMS

"""

input_data = (5,166,72,19,175,25.8,0.587,51)
input_data_as_numpy_array = np.asarray(input_data)  #convertibg input array to numpy array as its easy for model to work with numpy array
# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data as while training we have standardized the input so here also
std_data =scaler.transform(input_data_reshaped)
print(std_data)
prediction=classifier.predict(std_data)
print(prediction)
if(prediction[0]==0):
  print("THE PERSON IS NOT DAIBETIC")
else:
  print("THE PERSON IS DIABETIC!! PLEASE CONSULT A DOCTOR..")

